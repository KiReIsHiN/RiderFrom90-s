Программист – это специалист, создающий исходный код для программы. 
Такой программой может быть операционная система компьютера, видеоигра, web или мобильное приложение и даже алгоритм работы микроволновки. 
Программный код пишется на специальном языке программирования. 
Он состоит из обычных слов и некоторых специальных символов.

По специализации программисты делятся на системных, прикладных и веб-программистов. 
*Прикладные программисты занимаются написанием различных программ и приложений: игры (например, популярная игра Angry birds), 
офисные приложения (например, Microsoft Office Word) и многое другое. 
*Системные программисты занимаются созданием операционных систем (например, Android или iOS). 
*Веб-программисты разрабатывают интернет-сайты и программы, которые поддерживают работу этих сайтов.

10 вещей, которые должен знать каждый программист:
*Алгоритмы и структура данных
*Управление исходным кодом
*Текстовые редакторы
*Интегрированная среда разработки
*Базы данных и SQL.
*UNIX или Linux.
*Microsoft Excel.
*Языки программирования

Какие знания нужны программисту?
*Фундаментальные знания
	-Дискретную математику. Комбинаторную оптимизацию и методы оптимизации.
	-Функции и математическую индукцию.
	-Линейную алгебру.
	-Теорию вероятностей и математическую статистику.
*Основные теоретические и практические знания
	-Умение находить и использовать информацию.
	-Желание «копать». 
	Каждый раз когда разработчик встречает что-то непонятное, первым его порывом должно быть – разобраться, как это работает. 
	Что делает этот метод? Зачем этот класс? 
	Умение пользоваться средствами разработки.
	-Базовые знания об операционных системах: что такое переменные окружения? Что такое процесс? Что такое поток? Что такое рабочая директория?
	-Понимание, зачем нужны инструменты контроля версий вроде Git, Subversion, TFS? Что они делают? Что такое Continuous Integration?
	-Основные знания о платформе, на которой вы хотите работать. Что такое точка входа в приложение? Где она находится? Что такое сборка мусора? Как получается, что вызывается мой контроллер? Что такое logging? Что такое dependency injection?
	-Знание баз данных. Без этого никуда: умение создать таблицу, вставить, получить или удалить данные. Что такое GROUP BY? Какие бывают JOIN? Чем хранимая процедура отличается от функции?

Навыки и качества хорошего программиста:
	-Аналитически мыслит
	-Знает, как писать чистый код
	-Стремится быть лучше, знать больше – саморазвивается
	-Любит то, что делает






Как вы считаете, чем будите заниматься на работе:

Создание сайта, приложения, игры - это сложный, многоуровневый процесс, над работой которого трудится целая команда людей.
Несмотря на то, что этот процесс требует множества математических расчетов, точности просчетов и выверенности конечного результата, 
я нахожу этот процесс также творческим.

Если Вы не согласны с этим - приведу в пример пару этапов:
*Вначале нужна идея того, что будет в конечном результате получено обычным пользователем. Идея = творческий процесс
*Далее идет этап зарисовки, процесс креативного создания того как это будет видится обычным пользователем.
*После этого продумывается процесс взаимодействия элементов на экране и между собой.
Эти процессы схожи с процессами написания картины или книги.

Однако, процесс создания игры/сайта/приложения/программы гораздо сложнее и требует усилия специалистов различных направленностей.
Начиная от специалиста, который напишет программный код для управления кнопкой/игроком/картинкой на экране; или специалиста, который напишет музыку
для того или иного действия; заканчвая специалистом, который соединит это все воедино.
Команду разработчиков можно (по моему мнению) сравнить с аркестром, где каждый четко играет свою партию, но только всецело у них получается 
классическое произведение.

Проходя курс по разработке игр на Unity, мы сталкиваемся с разными ролями в этом оркестре: мы пишем программный код, создаем сцену и размещаем на ней объекты,
мы определяем как эти объекты будут между собой взаимодействовать, мы выбираем модель взаимодействия пользователя с объектами на сцене, подбираем музыку и освещение,
а также определяем то, как будет выглядеть конечный продукт.

Очень важно знать и уметь "играть" не только свою партию, но и знать партию "музыканта", сидящего напротив.
Например, создавая сцену, нужно понимать, какие модели используются в проекте: низкополигональные или высокополигональные (для этого нужно хоть раз создать модель самому).

По моему мнению - находясь в коллективе разработчиков, я смогу выполнять различные роли в создании готового проекта: писать программный код, создавать интерфейс, сцену, объекты.
